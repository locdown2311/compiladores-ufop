package lang.parser;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

// Terminais
terminal DATA, IF, ELSE, WHILE, READ, PRINT, RETURN, TRUE, FALSE, NULL, NEW;
terminal INT, FLOAT, CHAR, ID;
terminal String, Int, Char, Bool, Float;
terminal LPAREN, RPAREN, LCHAV, RCHAV, LCOLC, RCOLC, SEMICOLON, EQUAL,COMMA, DOUBLE_COLON, DOT, LESS_THAN, MORE_THAN;
terminal LOGICAL_AND, LOGICAL_OR, LOGICAL_EQ, LOGICAL_NE, PLUS, MINUS, TIMES, DIVIDE, MOD, LOGICAL_NOT;

// NÃ£o Terminais
nonterminal prog, defList, def, data, declList, decl, func;
nonterminal paramsOpt, params, moreParams, returnTypeOpt, moreTypes;
nonterminal type, btype, cmdList, cmd, moreExps, lvalueOpt;
nonterminal moreLvalues, expsOpt, exps, exp, newArray, lvalue;

precedence left LOGICAL_OR;
precedence left LOGICAL_AND;
precedence left LOGICAL_EQ, LOGICAL_NE;
precedence left LESS_THAN;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right LOGICAL_NOT, MINUS;

prog ::= defList ;

defList ::= 
    | def defList
    ;

def ::= data
    | func
    ;

data ::= DATA ID LCHAV declList RCHAV ;

declList ::= 
    | decl declList
    ;

decl ::= ID DOUBLE_COLON type SEMICOLON ;

func ::= ID LPAREN paramsOpt RPAREN returnTypeOpt LCHAV cmdList RCHAV ;

paramsOpt ::= 
    | params
    ;

params ::= ID DOUBLE_COLON type moreParams ;

moreParams ::= 
    | COMMA ID DOUBLE_COLON type moreParams
    ;

returnTypeOpt ::= 
    | COMMA type moreTypes
    ;

moreTypes ::=
    | COMMA type moreTypes
    ;

type ::= type LCOLC RCOLC
    | btype
    ;

btype ::= Int
    | Char
    | Bool
    | Float
    | ID
    ;

cmdList ::= 
    | cmd cmdList
    ;

cmd ::= 
    | LCHAV cmdList RCHAV
    | IF LPAREN exp RPAREN cmd
    | IF LPAREN exp RPAREN cmd ELSE cmd
    | WHILE LPAREN exp RPAREN cmd
    | READ lvalue SEMICOLON
    | PRINT exp SEMICOLON
    | RETURN exp moreExps SEMICOLON
    | lvalue EQUAL exp SEMICOLON
    | ID EQUAL exp SEMICOLON
    | ID LPAREN expsOpt RPAREN lvalueOpt SEMICOLON
    ;

moreExps ::=
    | COMMA exp moreExps
    ;

lvalueOpt ::=
    | LESS_THAN lvalue moreLvalues MORE_THAN
    ;

moreLvalues ::=
    | COMMA lvalue moreLvalues
    ;

expsOpt ::= 
    | exps
    ;

exps ::= exp moreExps;

exp ::= exp LOGICAL_AND exp
    | exp LOGICAL_OR exp
    | exp LESS_THAN exp
    | exp LOGICAL_EQ exp
    | exp LOGICAL_NE exp
    | exp PLUS exp
    | exp MINUS exp
    | exp TIMES exp
    | exp DIVIDE exp
    | exp MOD exp
    | LOGICAL_NOT exp
    | MINUS exp
    | TRUE
    | FALSE
    | NULL
    | INT
    | FLOAT
    | CHAR
    | lvalue
    | LPAREN exp RPAREN
    | NEW type newArray
    | ID LPAREN expsOpt RPAREN LCOLC exp RCOLC
    ;

newArray ::=
    | LCOLC exp RCOLC newArray
    ;

lvalue ::= ID
    | lvalue LCOLC exp RCOLC
    | lvalue DOT ID
    ;