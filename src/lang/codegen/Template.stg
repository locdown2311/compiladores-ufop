attr(var, expr) ::= "<var> = <expr>;"
lvalue(name, array) ::= "<name><array>"
array_access(expr) ::= "[<expr>]"
boolean_expr(value) ::= "<value>"
float_expr(value) ::= "<value>"
int_expr(value) ::= "<value>"
new_array(var, type, expr) ::= "<var> = new <type>[<expr >]; "
call(name, args) ::= <<<name>(<args; separator=" , " >)>>
mul_expr(left_expr, right_expr) ::= "(<left_expr > *<right_expr >)"
div_expr(left_expr, right_expr) ::= "(<left_expr > / <right_expr >)"
mod_expr(left_expr, right_expr) ::= "(<left_expr > % <right_expr >)"
add_expr(left_expr, right_expr) ::= "(<left_expr > + <right_expr >)"
sub_expr(left_expr, right_expr) ::= "(<left_expr > âˆ’ <right_expr >)"


print(expr) ::= "System.out.println(<expr>) ; "
return(expr) ::= "return <expr; separator=",">;"

iterate(expr, stmt) ::= <<
while(<expr>) {
    <stmt>
}
>>

if(expr, thn, els) ::= <<
if(<expr>) {
<thn>
} <if(els)>else {
<els>
}
<endif>
>>

func(type, name, params, decl, stmt) ::= <<
static <type> <name>(<params; separator=" , " >) {
    <if (decl)><decl; separator=",\n" >;<endif>
    <stmt>
}
>>

